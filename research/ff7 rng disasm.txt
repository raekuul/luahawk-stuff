##Random Function## 

lw r3,0x00d4(r28)		# Load 32-bit into V1 from 0x00d4(GP)
lui r2, 0x8006			# Lshift 0x8006 by 0x10, and store it in V0 # ????8006 becomes 80060000
addiu r2,r2,0x2e10		# Add 0x2e10 to V0 and store in V0
addu r3,r3,r2			# Add V0 to V1 and store it in V1
lbu r2,0x0(r3)			# Load 8-bit Unsigned into V0 from 0x0(V1)
nop						# nop

addiu r4,r2,0x01		# Add 0x01 to V0 and store in A0
andi r2,r2,0xff			# Bitmask (AND) 0xff by V0, and store it in V0
sb r4,0x0(r3)			# Store 8-bit from A0 into 0x0(V1)

lui r1,0x8008			# Lshift 0x8008 by 0x10, and store it in AT
addu r1,r1,r2			# Add V0 to AT and store in AT
lbu r2,0x3084(r1)		# Load 8-bit Unsigned into V0 from 0x3084(AT)
jr r31 					# Delay one cycle, then jump to address stored in RA
nop 					# nop

lw r3,0x0008(r28)		# Load 32-bit into V1 from 0x0008(GP)
nop 					# nop

addiu r4,r3,0x01		# Add 0x01 to V1 and store in A0

andi r3,r3,0x07			# Bitmask (AND) 0x07 by V1, and store it in V1
sw r4,0x08(r28)			# Store 32-bit from A0 into 0x08(GP)


beq r3,r0,0x14c18		# IF V1 = 0 THEN jump to 0x00052d50 after one cycle # Lshift 0x14c18 by 0x2, sign extend to 32 bits, this is target address
addu r16,r2,r0			# Add 0 to V0 and store in S0
jal 0x14b54				# Lshift 0x14b52 by 0x2, (AND) PC, jump to resultant address. Address of instruction into LR.
nop						# nop

lw r2,0xd4(r28)			# Load 32-bit into V0 from 0xd4(GP)
nop						# nop

addiu r2,r2,0x01		# Add 0x01 to V0 and store in V0
andi r2,r2,0x07			# Bitmask (AND) 0x07 by V0, and store it in V0
sw r2,0xd4(r28)			# Store 32-bit from V0 into 0xd4(GP)
jr r31					# Jump to address stored in RA after one cycle
nop						# nop

jal 0x14b70				# Lshift 0x14b70 by 0x2, (AND) PC, jump to resultant address. Address of instruction into LR.
nop 					# nop

lw r3,0xd4(r28)			# Load 32-bit into V1 from 0xd4(GP)
lui r2,0x8006			# Lshift 0x8006 by 0x10, and store it in V0
addiu r2,r2,0x2e10		# Add 0x2e10 to V0 and store in V0
addu r3,r3,r2			# Add V0 to V1 and store in V1
lbu r2,0x0(r3)			# Load 8-bit Unsigned into V0 from 0x0(V1)
nop						# nop

addiu r4,r2,0x01		# Add 0x01 to V0 and store in A0
andi r2,r2,0xff			# Bitmask (AND) 0xff by V0, and store it in V0
sb r4,0x0(r3)			# Store 8-bit from A0 into 0x0(V1)

lui r1,0x8008			# Lshift 0x8008 by 0x10, and store it in AT
addu r1,r1,r2			# Add V0 to AT and store in AT
lbu r2,0x3084(r1)		# Load 8-bit Unsigned into V0 from 0x3084(AT)
jr r31					# Delay one cycle, then jump to address stored in RA
nop						# nop

andi r2,r2,0xff			# Bitmask (AND) 0xff by V0, and store it in V0
sll r2,r2,0x08			# Lshift V0 by 0x08, and store it in V0
andi r3,r16,0xff		# Bitmask (AND) 0xff by S0, and store it in V1
or r2,r3,r2				# Bitmerge (OR) V0 by V1, store result in V0
lw r31,0x14(r29)		# Load 32-bit into RA from 0x14(SP)
lw r16,0x10(r29)		# Load 32-bit into S0 from 0x14(SP)
addiu r29,r29,0x18		# Add 0x18 to SP and store in SP
jr r31					# Delay one cycle, then jump to address stored in RA
nop						# nop

lw r31,0x10(r29)		# Load 32-bit into RA from 0x10(SP)
andi r2,r2,0xffff		# Bitmask (AND) 0xff by V0, and store it in V0
jr r31					# Delay one cycle, then jump to address stored in RA
addiu r29,r29,0x18		# Add 0x18 to SP and store in SP

## calculate crit_rnd for which to compare against crit% ## 
## This section is actually simple, but compiler optimized for MIPS
## Just [crit_rnd = ((rnd0 * 99) / 65535) + 1]

slt r2,r16,r2			# slt V0, S0, V0
bne r2,r0,0xb0888		# bne V0, ZR, 0xb0888
nop 					# nop